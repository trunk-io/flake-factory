# This config was automatically generated from your source code
# Stacks detected: cicd:github-actions:.github/workflows,deps:node:.,deps:python:.,deps:rust:rust,test:jest:
version: 2.1
orbs:
  node: circleci/node@5
  python: circleci/python@2
jobs:
  test-node:
    # Install node dependencies and run tests
    executor: node/default
    environment:
      TRUNK_PUBLIC_API_ADDRESS: api.trunk-staging.io
#      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    steps:
      - checkout
      - node/install-packages:
          cache-path: ~/project/node_modules
          override-ci-command: npm install
      - run:
          name: Run tests with Jest
          command: |
            ./node_modules/.bin/jest --config=javascript/tests/jest/jest.config.json javascript/tests/jest/**/*.js
      - run:
          name: Upload test results to Trunk
          when: always
          environment:
            TRUNK_PUBLIC_API_ADDRESS: https://api.trunk-staging.io/
          command: |
            echo trunk public api address is used ${TRUNK_PUBLIC_API_ADDRESS}
            echo secrets are ${TRUNK_ORG_SLUG} and ${TRUNK_API_TOKEN}
            curl -fsSL --retry 3 "https://trunk.io/releases/analytics-cli/latest" -o ./trunk-analytics-uploader
            chmod +x ./trunk-analytics-uploader
            ./trunk-analytics-uploader upload --junit-paths "tests/jest/jest_junit_test.xml" --org-url-slug ${TRUNK_ORG_SLUG} --token ${TRUNK_API_TOKEN}
            echo We are done here
      - store_test_results:
          path: ./test-results/
  test-python:
    # Install dependencies and run tests
    docker:
      - image: cimg/python:3.8-node
    steps:
      - checkout
      - python/install-packages
      - run:
          name: Run tests
          command: pytest --junitxml=junit.xml || ((($? == 5)) && echo 'Did not find any tests to run.')
      - store_test_results:
          path: junit.xml
  test-rust:
    docker:
      - image: cimg/rust:1.70
    working_directory: ~/project/rust
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          key: cargo-{{ checksum "Cargo.lock" }}
      - run:
          command: cargo test
      - save_cache:
          key: cargo-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo
  deploy:
    # This is an example deploy job, not actually used by the workflow
    docker:
      - image: cimg/base:stable
    steps:
      # Replace this with steps to deploy to users
      - run:
          name: deploy
          command: '#e.g. ./deploy.sh'
      - run:
          name: found github actions config
          command: ':'
workflows:
  build-and-test:
    jobs:
      - test-node
      - test-python
      - test-rust
    # - deploy:
    #     requires:
    #       - test-node
    #       - test-python
    #       - test-rust
